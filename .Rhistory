sum(x**2)
}))
test.err <- mean(apply(test.x - test.xp, 1, function(x) {
sum(x**2)
}))
# add to vector
train.rerr <- c(train.rerr, train.err)
test.rerr <- c(test.rerr, test.err)
}
plot(2:num.feats, train.rerr)
plot(2:num.feats, test.rerr)
num.samps <- 10000
num.feats <- 500
sim.dat <- rmvnorm(n = num.samps, mean = rep(0, num.feats),
sigma = diag(x = 1, nrow = num.feats, ncol = num.feats))
rownames(sim.dat) <- paste('sample', 1:nrow(sim.dat), sep = '.')
train.samps <- sample(rownames(sim.dat), size = num.samps * 0.63)
test.samps <- setdiff(rownames(sim.dat), train.samps)
train.x <- sim.dat[train.samps,]
test.x <- sim.dat[test.samps,]
train.pca <- prcomp(train.x)
train.z <- predict(train.pca, newdata = train.x)
test.z <- predict(train.pca, newdata = test.x)
train.rerr <- c()
test.rerr <- c()
for (l in 2:num.feats) {
# make x
train.xp <- train.z[,1:l] %*% t(train.pca$rotation[,1:l])
test.xp <- test.z[,1:l] %*% t(train.pca$rotation[,1:l])
# get err
train.err <- mean(apply(train.x - train.xp, 1, function(x) {
sum(x**2)
}))
test.err <- mean(apply(test.x - test.xp, 1, function(x) {
sum(x**2)
}))
# add to vector
train.rerr <- c(train.rerr, train.err)
test.rerr <- c(test.rerr, test.err)
}
plot(2:num.feats, train.rerr)
library(mvtnorm)
## general params
pure.samps <- 20
mix.samps <- 20
## set distribution parameters
a.mean <- c(0, 0)
b.mean <- c(10, 0)
sigma.mat <- matrix(c(1, 0, 0, 1), nrow = 2)
## sample pure populatios
a.pure <- rmvnorm(pure.samps, mean = a.mean, sigma = sigma.mat)
b.pure <- rmvnorm(pure.samps, mean = b.mean, sigma = sigma.mat)
## sample mixed populations
a.mix <- rmvnorm(mix.samps, mean = a.mean, sigma = sigma.mat)
b.mix <- rmvnorm(mix.samps, mean = b.mean, sigma = sigma.mat)
mix.per <- runif(mix.samps)
mix.x <- a.mix[,1] * mix.per + b.mix[,1] * (1 - mix.per)
mix.y <- a.mix[,2] * mix.per + b.mix[,2] * (1 - mix.per)
mix.dat <- cbind(mix.x, mix.y)
## combine
sim.mat <- Reduce(rbind, list(a.pure, b.pure, mix.dat))
true.phi <- c(rep(0, pure.samps), rep(1, pure.samps), mix.per)
plot(sim.mat[,1], sim.mat[,2])
sample(1:5, 2)
X <- sim.mat
k <- 2
N <- nrow(X)
# create initial centers by random sampling
c_mat <- t(X[sample(1:N, 2),])
c_mat
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, 2),])
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
#' Finds the minimum u_ijk - assignment of x_i to pair of clusters c_j and c_k.
#'
#' @param x_i Data for x_i.
#' @param c_j Cluster representative for cluster j.
#' @param c_k Cluster representative for cluster k.
#' @return u_ijk; value betwen 0 and 1.
MinU <- function(x_i, c_j, c_k) {
# compute
u_ijk <- sum(t((c_k - c_j)) * (c_k - x_i)) / sum((c_k - c_j)**2)
# bound appropriately
u_ijk <- max(u_ijk, 0)
u_ijk <- min(u_ijk, 1)
# return
return(u_ijk)
}
#' Finds the optimal phi vector for data x_i given matrix of cluster representatives c_mat.
#'
#' @param x_i Data x_i.
#' @param c_mat Matrix of cluster representatives.
#' @return 1xC Phi vector.
MinPhi <- function(x_i, c_mat) {
# set tracker variables
min.err <- Inf
opt.u <- Inf
best.inds <- c(-1, -1)
# loop through all pairs
for (j in 1:(nrow(c_mat) - 1)) {
for (k in (j + 1):nrow(c_mat)) {
# minimize u
min.u <- MinU(x_i, c_mat[j,], c_mat[k,])
# calculate error
x.err <- sum((x_i - (min.u*c_mat[j,] + (1 - min.u)*c_mat[k,]))**2)
# update if necessary
if (x.err < min.err) {
min.err <- x.err
opt.u <- min.u
best.inds <- c(j, k)
}
}
}
# return phi vec
print(best.inds)
phi.vec <- rep(0, nrow(c_mat))
phi.vec[best.inds] <- c(opt.u, 1 - opt.u)
return(phi.vec)
}
phi_mat[,a] <- MinPhi(X[a,], c_mat)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
phi_mat
phi.prod <- inv(phi_mat %*% t(phi_mat)) %*% phi_mat
phi.prod <- solve(phi_mat %*% t(phi_mat)) %*% phi_mat
phi.prod
new.c <- phi.prod %*% X
new.c
return(t(new.c))
X <- sim.mat
k <- 3
N <- nrow(X)
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
new.c
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
c_mat
#' Finds the optimal phi vector for data x_i given matrix of cluster representatives c_mat.
#'
#' @param x_i Data x_i.
#' @param c_mat Matrix of cluster representatives.
#' @return 1xC Phi vector.
MinPhi <- function(x_i, c_mat) {
# set tracker variables
min.err <- Inf
opt.u <- Inf
best.inds <- c(-1, -1)
# loop through all pairs
for (j in 1:(nrow(c_mat) - 1)) {
for (k in (j + 1):nrow(c_mat)) {
# minimize u
min.u <- MinU(x_i, c_mat[j,], c_mat[k,])
# calculate error
x.err <- sum((x_i - (min.u*c_mat[,j] + (1 - min.u)*c_mat[,k]))**2)
# update if necessary
if (x.err < min.err) {
min.err <- x.err
opt.u <- min.u
best.inds <- c(j, k)
}
}
}
# return phi vec
phi.vec <- rep(0, nrow(c_mat))
phi.vec[best.inds] <- c(opt.u, 1 - opt.u)
return(phi.vec)
}
#' Finds optimal cluster centers given X and Phi matrices.
#'
#' @param x_mat Design matrix X (features X samples).
#' @param phi_mat Matrix of pairwise cluster assignments ().
#' @return (Clusters X Features) matrix of cluster representatives.
MinC <- function(x_mat, phi_mat) {
phi.prod <- solve(phi_mat %*% t(phi_mat)) %*% phi_mat
new.c <- phi.prod %*% X
return(t(new.c))
}
X <- sim.mat
k <- 3
N <- nrow(X)
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
MinPhi(X[a,], c_mat)
#' Finds the optimal phi vector for data x_i given matrix of cluster representatives c_mat.
#'
#' @param x_i Data x_i.
#' @param c_mat Matrix of cluster representatives.
#' @return 1xC Phi vector.
MinPhi <- function(x_i, c_mat) {
# set tracker variables
min.err <- Inf
opt.u <- Inf
best.inds <- c(-1, -1)
# loop through all pairs
for (j in 1:(nrow(c_mat) - 1)) {
for (k in (j + 1):nrow(c_mat)) {
# minimize u
min.u <- MinU(x_i, c_mat[j,], c_mat[k,])
# calculate error
x.err <- sum((x_i - (min.u*c_mat[,j] + (1 - min.u)*c_mat[,k]))**2)
# update if necessary
if (x.err < min.err) {
min.err <- x.err
opt.u <- min.u
best.inds <- c(j, k)
}
}
}
# return phi vec
phi.vec <- rep(0, ncol(c_mat))
phi.vec[best.inds] <- c(opt.u, 1 - opt.u)
return(phi.vec)
}
#' Finds optimal cluster centers given X and Phi matrices.
#'
#' @param x_mat Design matrix X (features X samples).
#' @param phi_mat Matrix of pairwise cluster assignments ().
#' @return (Clusters X Features) matrix of cluster representatives.
MinC <- function(x_mat, phi_mat) {
phi.prod <- solve(phi_mat %*% t(phi_mat)) %*% phi_mat
new.c <- phi.prod %*% X
return(t(new.c))
}
X <- sim.mat
k <- 3
N <- nrow(X)
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
phi_mat
# assign C
new.c_mat <- MinC(X, phi_mat)
phi_mat %*% t(phi_mat)
X <- sim.mat
k <- 2
N <- nrow(X)
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
new.c_mat
c_mat
X <- sim.mat
k <- 2
converged <- FALSE
N <- nrow(X)
# create initial centers by random sampling, empty phi.mat
c_mat <- t(X[sample(1:N, k),])
# create initial centers by random sampling, empty phi.mat
new.c_mat <- t(X[sample(1:N, k),])
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
c_mat
new.c_mat
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
N <- nrow(X)
X <- scale(X, scale = FALSE)
# create initial centers by random sampling, empty phi.mat
new.c_mat <- t(X[sample(1:N, k),])
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
plot(X[,1], X[,2])
#' Finds optimal cluster centers given X and Phi matrices.
#'
#' @param x_mat Design matrix X (features X samples).
#' @param phi_mat Matrix of pairwise cluster assignments ().
#' @return (Clusters X Features) matrix of cluster representatives.
MinC <- function(x_mat, phi_mat) {
phi.prod <- solve(phi_mat %*% t(phi_mat)) %*% phi_mat
new.c <- phi.prod %*% X
return(new.c)
}
X <- sim.mat
k <- 2
converged <- FALSE
N <- nrow(X)
X <- scale(X, scale = FALSE)
# create initial centers by random sampling, empty phi.mat
new.c_mat <- t(X[sample(1:N, k),])
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
if (!converged) {c_mat <- new.c_mat}
phi_mat <- matrix(0L, nrow = k, ncol = N)
# assign phi
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
X <- sim.mat
k <- 2
converged <- FALSE
N <- nrow(X)
X <- scale(X, scale = FALSE)
# create initial centers by random sampling, empty phi.mat
new.c_mat <- t(X[sample(1:N, k),])
iter.count <- 0
while (!converged) {
iter.count <- iter.count + 1
print(iter.count)
# assign phi
phi_mat <- matrix(0L, nrow = k, ncol = N)
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
# check convergence
if (mean(abs(new.c_mat - c_mat)) < 0.01) { converged <- TRUE }
}
print(new.c_mat)
new.c_mat
c_mat
N <- nrow(X)
X <- scale(X, scale = FALSE)
# create initial centers by random sampling, empty phi.mat
new.c_mat <- t(X[sample(1:N, k),])
iter.count <- 0
while (!converged) {
iter.count <- iter.count + 1
print(iter.count)
# reset C
c_mat <- new.c_mat
# assign phi
phi_mat <- matrix(0L, nrow = k, ncol = N)
for (a in 1:N) {
phi_mat[,a] <- MinPhi(X[a,], c_mat)
}
# assign C
new.c_mat <- MinC(X, phi_mat)
print(new.c_mat)
# check convergence
if (mean(abs(new.c_mat - c_mat)) < 0.01) { converged <- TRUE }
}
print(new.c_mat)
phi_mat
plot(phi_mat[1,], true.phi)
plot(phi_mat[2,], true.phi)
plot(sim.mat[,1], sim.mat[,2])
plot(phi_mat[2,], true.phi)
plot(phi_mat[1,], true.phi)
devtools::install_github(repo = "califano-lab/PISCES", force = TRUE, build_vignettes = TRUE)
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
dectools::document()
library(devtools)
document()
git config --global credential.helper store
devtools::install_github(repo = "califano-lab/PISCES", force = TRUE, build_vignettes = TRUE)
